
/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean \nFailsafe: false \nDescription: Enables writing to flash memory for all added variables. \nNote: This value is recommended to be enabled on most firmwares, but is left configurable for firmwares that may have issues with NVRAM variable storage garbage collection or alike."; ObjectID = "0qd-Qe-41F"; */
"0qd-Qe-41F.ibShadowedToolTip" = "<Permet d'écrire en flash pour toutes les variables ajoutées. \nIl est recommandé d'activer cette valeur sur la plupart des micrologiciels. Si le bios de votre carte mère importe du spam à cause de nvram, vous pouvez le désactiver.>";

/* Class = "NSTableColumn"; headerCell.title = "Key"; ObjectID = "1Hp-YT-QB3"; */
"1Hp-YT-QB3.headerCell.title" = "Clé";

/* Class = "NSMenuItem"; title = "STRING"; ObjectID = "2GE-aT-481"; */
"2GE-aT-481.title" = "CHAÎNE";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Enables loading of NVRAM variable file named nvram.plist from EFI volume root.\nThis file must have root plist dictionary type and contain two fields:\n• Version — plist integer, file version, must be set to 1.\n• Add — plist dictionary, equivalent to Add from config.plist.\nVariable loading happens prior to Delete (and Add) phases. Unless LegacyOverwrite is enabled, it overwrite any existing variable. Variables allowed to be set must be specified in LegacySchema. Third-party scripts may be used to create nvram.plist file. An example of such script can be found in Utilities. The use of third-party scripts may require ExposeSensitiveData set to 0x3 to provide boot-path variable with OpenCore EFI partition UUID.\n\nWARNING: This feature is very dangerous as it passes unprotected data to your firmware variable services. Use it only when no hardware NVRAM implementation is provided by the firmware or it is incompatible."; ObjectID = "2KJ-kg-wip"; */
"2KJ-kg-wip.ibShadowedToolTip" = "Permet de charger un fichier de variables NVRAM nommé nvram.plist à partir du répertoire racine du volume EFI. \nLes appareils sans NVRAM native sont définis sur OUI \n Les périphériques avec NVRAM matériel qui ne fonctionnent pas correctement sous macOS sont définis sur OUI \n Les périphériques avec NVRAM matériel qui fonctionnent correctement sous macOS sont définis sur NON \nUn chargement variable se produit dans \"bloquer\" (et \"ajouter\") Avant l'étape et n'écrase aucune variable existante. Les variables autorisées doivent être spécifiées dans LegacySchema. Des scripts tiers peuvent être utilisés pour créer le fichier nvram.plist. Des exemples de tels scripts peuvent être trouvés dans les utilitaires. L'utilisation de scripts tiers peut nécessiter de définir ExposeSensitiveData sur 0x3 pour fournir une variable de chemin de démarrage pour l'UUID de partition OpenCore EFI. \nAvertissement: cette fonctionnalité est très dangereuse car elle transmet des données non protégées au service de variable de micrologiciel. Utilisez-le uniquement si le firmware ne fournit pas d'implémentation matérielle NVRAM ou est incompatible avec le firmware.";

/* Class = "NSMenuItem"; title = "DATA"; ObjectID = "5S9-qs-ueO"; */
"5S9-qs-ueO.title" = "DONNÉES";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Permits overwriting firmware variables from nvram.plist.\nNote: Only variables accessible from the operating system will be overwritten."; ObjectID = "Bqu-cW-189"; */
"Bqu-cW-189.ibShadowedToolTip" = "Pour les utilisateurs de nvram simulés, écrivez nvram.plist dans le firmware. \nRemarque: il écrase uniquement les variables accessibles depuis le système d'exploitation, ce qui n'est généralement pas recommandé.";

/* Class = "NSMenuItem"; title = "NUMBER"; ObjectID = "C9A-DN-Ig8"; */
"C9A-DN-Ig8.title" = "CHIFFRE";

/* Class = "NSTableColumn"; headerCell.title = "Value"; ObjectID = "Eac-Nq-33R"; */
"Eac-Nq-33R.headerCell.title" = "Valeur";

/* Class = "NSButtonCell"; title = "LegacyOverwrite"; ObjectID = "Hrg-If-vgt"; */
"Hrg-If-vgt.title" = "LegacyOverwrite";

/* Class = "NSTableColumn"; headerCell.title = "UUID"; ObjectID = "Lmb-kn-JbT"; */
"Lmb-kn-JbT.headerCell.title" = "UUID";

/* Class = "NSBox"; title = "Box"; ObjectID = "NoT-Wv-Hn9"; */
"NoT-Wv-Hn9.title" = "Box";

/* Class = "NSButtonCell"; title = "LegacyEnable"; ObjectID = "ORI-69-MG3"; */
"ORI-69-MG3.title" = "LegacyEnable";

/* Class = "NSView"; ibShadowedToolTip = "3. LegacySchema\nType: plist dict\nDescription: Allows setting select NVRAM variables from a map (plist dict) of GUIDs to an array (plist array) of variable names in plist string format.\n* value can be used to accept all variables for select GUID.\nWARNING: Choose variables very carefully, as nvram.plist is not vaulted. For instance, do not put boot-args or csr-active-config, as this can bypass SIP.\nTo read NVRAM variable value from macOS one could use nvram by concatenating variable GUID and name separated by : symbol. For example, nvram 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args.\nA continuously updated variable list can be found in a corresponding document: NVRAM Variables.\n\nWARNING: Choose variables very carefully, as nvram.plist is not vaulted. For instance, do not put boot-args\nor csr-active-config, as this can bypass SIP."; ObjectID = "cVF-o8-z0z"; */
"cVF-o8-z0z.ibShadowedToolTip" = "Utilisé pour allouer des variables NVRAM, utilisé avec LegacyEnable \nVous pouvez utiliser des valeurs * pour accepter toutes les variables utilisées pour sélectionner un GUID. \nAvertissement: Étant donné que nvram.plist n'est pas stocké, choisissez très soigneusement les variables. Par exemple, ne mettez pas dans boot-args ou csr-active-config, car cela contournera SIP. \nPour lire les valeurs des variables NVRAM à partir de macOS, vous pouvez utiliser nvram en séparant le GUID de la variable et le nom par un symbole:. Par exemple, nvram 7C436110-AB2A-4BBB-A880-FE41995C9F82: boot-args. \nLa liste des variables constamment mise à jour se trouve dans le document correspondant: Variables NVRAM. \nAvertissement: Étant donné que nvram.plist n'est pas stocké, choisissez très soigneusement les variables. Par exemple, ne mettez pas boot-args ou csr-active-config car il peut contourner SIP.";

/* Class = "NSTabViewItem"; label = "Delete"; ObjectID = "dmH-cD-uzh"; */
"dmH-cD-uzh.label" = "Effacer";

/* Class = "NSTabViewItem"; label = "Add"; ObjectID = "eSY-j6-jWD"; */
"eSY-j6-jWD.label" = "Ajouter";

/* Class = "NSTableColumn"; headerCell.title = "Key"; ObjectID = "ia9-0E-fQ8"; */
"ia9-0E-fQ8.headerCell.title" = "Clé";

/* Class = "NSTableColumn"; headerCell.title = "Type"; ObjectID = "imy-5n-EEC"; */
"imy-5n-EEC.headerCell.title" = "Type";

/* Class = "NSTableColumn"; headerCell.title = "Key*"; ObjectID = "j1D-Eg-beZ"; */
"j1D-Eg-beZ.headerCell.title" = "Clé*";

/* Class = "NSButtonCell"; title = "WriteFlash"; ObjectID = "oGQ-n7-FKX"; */
"oGQ-n7-FKX.title" = "WriteFlash";

/* Class = "NSTabViewItem"; label = "LegacySchema"; ObjectID = "oWw-vt-aiZ"; */
"oWw-vt-aiZ.label" = "LegacySchema";

/* Class = "NSTableColumn"; headerCell.title = "UUID"; ObjectID = "olA-O6-ChW"; */
"olA-O6-ChW.headerCell.title" = "UUID";

/* Class = "NSMenuItem"; title = "Get from 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14"; ObjectID = "pEK-IL-1zl"; */
"pEK-IL-1zl.title" = "Ajouter des données 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14";

/* Class = "NSView"; ibShadowedToolTip = "2. Delete\nType: plist dict\nDescription: Removes NVRAM variables from a map (plist dict) of GUIDs to an array (plist array) of variable names in plist string format.\nTo read NVRAM variable value from macOS one could use nvram by concatenating variable GUID and name separated by : symbol. For example, nvram 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args.\nA continuously updated variable list can be found in a corresponding document: NVRAM Variables."; ObjectID = "ph9-2g-adH"; */
"ph9-2g-adH.ibShadowedToolTip" = "Forcer la réécriture des variables NVRAM. Comme Add ne remplace pas les valeurs existantes dans la NVRAM, boot-args doit l'utiliser pour se rafraîchir";

/* Class = "NSTableColumn"; headerCell.title = "UUID"; ObjectID = "rFf-nE-Twf"; */
"rFf-nE-Twf.headerCell.title" = "UUID";

/* Class = "NSMenuItem"; title = "Get NVRAM data"; ObjectID = "rjh-HS-mRe"; */
"rjh-HS-mRe.title" = "Ajouter des données NVRAM";

/* Class = "NSTableView"; ibShadowedToolTip = "1. Add\nType: plist dict\nDescription: Sets NVRAM variables from a map (plist dict) of GUIDs to a map (plist dict) of variable names and their values in plist metadata format. GUIDs must be provided in canonic string format in upper or lower case (e.g. 8BE4DF61-93CA-11D2-AA0D-00E098032B8C).\nCreated variables get EFI_VARIABLE_BOOTSERVICE_ACCESS and EFI_VARIABLE_RUNTIME_ACCESS attributes set. Variables will only be set if not present or deleted. I.e. to overwrite an existing variable value add the variable name to the Delete section. This approach enables to provide default values till the operating system takes the lead.\nNote: If plist key does not conform to GUID format, behaviour is undefined.\n\nMandatory Variables\nWarning: These variables may be added by PlatformNVRAM or Generic subsections of PlatformInfo section. Using PlatformInfo is the recommend way of setting these variables.\nThe following variables are mandatory for macOS functioning:\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeatures\n32-bit FirmwareFeatures. Present on all Macs to avoid extra parsing of SMBIOS tables\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeaturesMask\n32-bit FirmwareFeaturesMask. Present on all Macs to avoid extra parsing of SMBIOS tables.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:MLB\nBoardSerialNumber. Present on newer Macs (2013+ at least) to avoid extra parsing of SMBIOS tables, especially in boot.efi.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ROM\nPrimary network adapter MAC address or replacement value. Present on newer Macs (2013+ at least) to avoid accessing special memory region, especially in boot.efi.\n\nRecommended Variables\nThe following variables are recommended for faster startup or other improvements:\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:csr-active-config\n32-bit System Integrity Protection bitmask. Declared in XNU source code in csr.h.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeatures\nCombined FirmwareFeatures and ExtendedFirmwareFeatures. Present on newer Macs to avoid extra parsing of SMBIOS tables\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeaturesMask\nCombined FirmwareFeaturesMask and ExtendedFirmwareFeaturesMask. Present on newer Macs to avoid extra parsing of SMBIOS tables.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_BID\nHardware BoardProduct (e.g. Mac-35C1E88140C3E6CF). Not present on real Macs, but used to avoid extra parsing of SMBIOS tables, especially in boot.efi.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_MLB\nHardware BoardSerialNumber. Override for MLB. Present on newer Macs (2013+ at least).\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_ROM\nHardware ROM. Override for ROM. Present on newer Macs (2013+ at least).\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:prev-lang:kbd\nASCII string defining default keyboard layout. Format is lang-COUNTRY:keyboard, e.g. ru-RU:252 for Russian locale and ABC keyboard. Also accepts short forms: ru:252 or ru:0 (U.S. keyboard, compatible with 10.9). Full decoded keyboard list from AppleKeyboardLayouts-L.dat can be found here. Using non-latin keyboard on 10.14 will not enable ABC keyboard, unlike previous and subsequent macOS versions, and is thus not recommended in case 10.14 is needed.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:security-mode\nASCII string defining FireWire security mode. Legacy, can be found in IOFireWireFamily source code in IOFireWireController.cpp. It is recommended not to set this variable, which may speedup system startup. Setting to full is equivalent to not setting the variable and none disables FireWire security.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:UIScale\nOne-byte data defining boot.efi user interface scaling. Should be 01 for normal screens and 02 for HiDPI screens.\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:DefaultBackgroundColor Four-byte RGBA data defining boot.efi user interface background colour. Standard colours include BF BF BF 00 (Light Gray) and 00 00 00 00 (Syrah Black). Other colours may be set at user’s preference."; ObjectID = "s0e-p0-A6y"; */
"s0e-p0-A6y.ibShadowedToolTip" = "4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 \nUIScale: interface utilisateur OpenCore et mise à l'échelle du premier étage de bootstrap \n01: taille normale \n02: HIDPI (faire apparaître les logos FileVault et Apple en taille normale sur les écrans HIDPI natifs) \nDefaultBackgroundColor: Définir MACOS La couleur d'arrière-plan de la première étape au démarrage, la valeur de réglage est la valeur hexadécimale de la couleur standard, par exemple, la valeur standard d'une couleur est 123456, puis remplissez 56341200 ici, faites attention à l'ordre inverse! \n7C436110-AB2A-4BBB-A880-FE41995C9F82 \nboot-args: -v debug = 0x100 (Boot Identifier) \ncsr-active-config: <00000000> (paramètre SIP) \n00000000-SIP est entièrement activé \n30000000-Autorisé Signé Kext se charge et autorise l'écriture sur les chemins d'accès du système de fichiers protégés \nE7030000-SIP est complètement fermé \n67000000-Déprécié \nnvda_drv: <> \nActivez NVIDIA WebDrivers lorsqu'il est défini sur 31 \nAucune carte N pour supprimer ce \nprev-lang: kbd: <0x7a682d48616e733a323532> (définissez la langue par défaut sur le chinois simplifié, laissez vide pour l'anglais)";

/* Class = "NSMenuItem"; title = "Get from 7C436110-AB2A-4BBB-A880-FE41995C9F82"; ObjectID = "suf-bH-Wor"; */
"suf-bH-Wor.title" = "Ajout des données 7C436110-AB2A-4BBB-A880-FE41995C9F82";

/* Class = "NSTableView"; ibShadowedToolTip = "Other Variables\nThe following variables may be useful for certain configurations or troubleshooting:\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args\nKernel arguments, used to pass configuration to Apple kernel and drivers. There are many arguments, which may be found by looking for the use of PE_parse_boot_argn function in the kernel or driver code. Some of the known boot arguments include:\n– acpi_layer=0xFFFFFFFF\n– acpi_level=0xFFFF5F (implies ACPI_ALL_COMPONENTS)\n– arch=i386 (force kernel architecture to i386, see KernelArch)\n– batman=VALUE (AppleSmartBatteryManager debug mask)\n– batman-nosmc=1 (disable AppleSmartBatteryManager SMC interface)\n– cpus=VALUE (maximum number of CPUs used)\n– debug=VALUE (debug mask)\n– io=VALUE (IOKit debug mask)\n– keepsyms=1 (show panic log debug symbols)\n– kextlog=VALUE (kernel extension loading debug mask)\n– nvram-log=1 (enables AppleEFINVRAM logs)\n– nv_disable=1 (disables NVIDIA GPU acceleration)\n– nvda_drv=1 (legacy way to enable NVIDIA web driver, removed in 10.12)\n– npci=0x2000 (legacy, disables kIOPCIConfiguratorPFM64)\n– lapic_dont_panic=1\n– slide=VALUE (manually set KASLR slide)\n– smcdebug=VALUE (AppleSMC debug mask)\n– -amd_no_dgpu_accel (alternative to WhateverGreen’s -radvesa for new GPUs)\n– -nehalem_error_disable\n– -no_compat_check (disable model checking on 10.7+)\n– -s (single mode)\n– -v (verbose mode)\n– -x (safe mode)\nThere are multiple external places summarising macOS argument lists: example 1, example 2.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:bootercfg\nBooter arguments, similar to boot-args but for boot.efi. Accepts a set of arguments, which are hexadecimal 64-bit values with or without 0x. At different stages boot.efi will request different debugging (logging) modes (e.g. after ExitBootServices it will only print to serial). Several booter arguments control whether these requests\nwill succeed. The list of known requests is covered below: – 0x00 – INIT.\n– 0x01 – VERBOSE (e.g. -v, force console logging).\n– 0x02 – EXIT.\n– 0x03 – RESET:OK.\n– 0x04 – RESET:FAIL (e.g. unknown board-id, hibernate mismatch, panic loop, etc.). – 0x05 – RESET:RECOVERY.\n– 0x06 – RECOVERY.\n– 0x07 – REAN:START.\n– 0x08 – REAN:END.\n– 0x09 – DT (can no longer log to DeviceTree).\n– 0x0A – EXITBS:START (forced serial only).\n– 0x0B – EXITBS:END (forced serial only).\n– 0x0C – UNKNOWN.\nIn 10.15 debugging support was mostly broken before 10.15.4 due to some kind of refactoring and introduction of a new debug protocol. Some of the arguments and their values below may not be valid for versions prior to 10.15.4. The list of known arguments is covered below:\n– boot-save-log=VALUE — debug log save mode for normal boot.\n∗ 0\n∗ 1\n∗ 2 — (default).\n∗ 3\n∗ 4 — (save to file).\n– wake-save-log=VALUE — debug log save mode for hibernation wake.\n∗ 0 — disabled.\n∗ 1\n∗ 2 — (default).\n∗ 3 — (unavailable).\n∗ 4 — (save to file, unavailable).\n– breakpoint=VALUE — enables debug breaks (missing in production boot.efi).\n∗ 0 — disables debug breaks on errors (default).\n∗ 1 — enables debug breaks on errors.\n– console=VALUE — enables console logging.\n∗ 0 — disables console logging.\n∗ 1 — enables console logging when debug protocol is missing (default).\n∗ 2 — enables console logging unconditionally (unavailable).\n– embed-log-dt=VALUE — enables DeviceTree logging.\n∗ 0 — disables DeviceTree logging (default).\n∗ 1 — enables DeviceTree logging.\n– kc-read-size=VALUE — Chunk size used for buffered I/O from network or disk for prelinkedkernel reading and related. Set to 1MB (0x100000) by default, can be tuned for faster booting.\n– log-level=VALUE — log level bitmask.\n∗ 0x01 — enables trace logging (default).\n– serial=VALUE — enables serial logging.\n∗ 0 — disables serial logging (default).\n∗ 1 — enables serial logging for EXITBS:END onwards.\n∗ 2 — enables serial logging for EXITBS:START onwards.\n∗ 3 — enables serial logging when debug protocol is missing.\n∗ 4 — enables serial logging unconditionally.\n– timestamps=VALUE — enables timestamp logging.\n∗ 0 — disables timestamp logging.\n∗ 1 — enables timestamp logging (default).\n– log=VALUE — deprecated starting from 10.15.\n∗ 1 — AppleLoggingConOutOrErrSet/AppleLoggingConOutOrErrPrint (classical ConOut/StdErr)\n∗ 2 — AppleLoggingStdErrSet/AppleLoggingStdErrPrint (StdErr or serial?)\n∗ 4 — AppleLoggingFileSet/AppleLoggingFilePrint (BOOTER.LOG/BOOTER.OLD file on EFI partition) – debug=VALUE — deprecated starting from 10.15.\n∗ 1 — enables print something to BOOTER.LOG (stripped code implies there may be a crash)\n∗ 2 — enables perf logging to /efi/debug-log in the device three\n∗ 4 — enables timestamp printing for styled printf calls\n– level=VALUE — deprecated starting from 10.15. Verbosity level of DEBUG output. Everything but 0x80000000 is stripped from the binary, and this is the default value.\nNote: To see verbose output from boot.efi on modern macOS versions enable AppleDebug option. This will save the log to general OpenCore log. For versions before 10.15.4 set bootercfg to log=1. This will print verbose output onscreen.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:bootercfg-once\nBooter arguments override removed after first launch. Otherwise equivalent to bootercfg.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:efiboot-perf-record\nEnable performance log saving in boot.efi. Performance log is saved to physical memory and is pointed by efiboot-perf-record-data and efiboot-perf-record-size variables. Starting from 10.15.4 it can also be saved to OpenCore log by AppleDebug option.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:fmm-computer-name Current saved host name. ASCII string.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:nvda_drv\nNVIDIA Web Driver control variable. Takes ASCII digit 1 or 0 to enable or disable installed driver.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:run-efi-updater \nOverride EFI firmware updating support in macOS (MultiUpdater, ThorUtil, and so on). Setting this to No or alternative boolean-castable value will prevent any firmware updates in macOS starting with 10.10 at least.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:StartupMute\nMute startup chime sound in firmware audio support. 8-bit integer. The value of 0x00 means unmuted. Missing variable or any other value means muted. This variable only affects Gibraltar machines (T2).\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:SystemAudioVolume\nSystem audio volume level for firmware audio support. 8-bit integer. The bit of 0x80 means muted. Lower bits are used to encode volume range specific to installed audio codec. The value is capped by MaximumBootBeepVolume AppleHDA layout value to avoid too loud audio playback in the firmware."; ObjectID = "tq7-BQ-JU5"; */
"tq7-BQ-JU5.ibShadowedToolTip" = "Les variables suivantes peuvent être utiles pour certaines configurations ou dépannage \n • 7C436110-AB2A-4BBB-A880-FE41995C9F82 \n1, boot-args \nLes paramètres du noyau sont utilisés pour transmettre la configuration au noyau et aux pilotes Apple. Il existe de nombreux paramètres, dont certains paramètres de démarrage connus: \n – acpi_layer = 0xFFFFFFFF \n – acpi_level = 0xFFFF5F (pour ACPI_ALL_COMPONENTS) \n – batman = value (masque de débogage AppleSmartBatteryManager) \n – batman-nosmc = 1 (désactivé Interface SMC AppleSmartBatteryManager) \n – cpus = valeur (nombre maximal de processeurs utilisés) \n – debug = valeur (masque de débogage) \n – io = valeur (masque de débogage IOKit) \n – keepymes = 1 (afficher le journal d'urgence Symbole de débogage) \n – kextlog = valeur (masque de débogage de chargement d'extension du noyau) \n – nv_disable = 1 (désactiver l'accélération GPU NVIDIA) \n – nvda_drv = 1 (ancienne méthode d'activation du pilote Web NVIDIA, supprimée en 10.12 ) \n – npci = 0x2000 (ancienne méthode, désactiver kIOPCIConfiguratorPFM64) \n – lapic_dont_panic = 1 \n – slide = valeur (définir manuellement la diapositive KASLR) \n – smcdebug = valeur (masque de débogage AppleSMC) \n-amd_no_dgpu_accel (remplacer -Radvesa de AnythingGreen pour le nouveau GPU) \n-nehalem_error_disable \n-no_compat_check (désactiver la vérification du modèle) \ns (mode mono-utilisateur) \nv (mode verbeux) \nx (mode sans échec) \n2, bootercfg \n boot paramètre Order, semblable à la botte-args, mais contient boot.efi. Accepte un ensemble de paramètres. Ces paramètres sont des valeurs hexadécimales de 64 bits avec ou sans le préfixe 0x. Ils sont principalement utilisés pour le contrôle de la journalisation: \nlog = value \n Généralement, ne génère aucun journal au démarrage, utilisez logo = 0 \ndebug = value \n ne génère généralement aucun journal au démarrage, utilisez debug = 0 \nlevel = value \n n'utilise généralement aucun journal, utilisez level = 0. \n3, bootercfg-once \n Après le premier démarrage, les paramètres du chargeur de démarrage seront remplacés. Sinon, c'est équivalent à bootercfg. \n4, fmm-computer-name \nLe nom de l'ordinateur actuellement enregistré. \n5, nvda_drv \nActivez le pilote Web NVIDIA, uniquement utilisé dans 10.13.x.";
