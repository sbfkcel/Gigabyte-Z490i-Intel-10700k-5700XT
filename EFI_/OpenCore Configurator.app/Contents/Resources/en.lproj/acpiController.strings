
/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Reset BGRT table Displayed status field to false.\nThis works around firmware that provide a BGRT table but fail to handle screen updates afterwards."; ObjectID = "0zY-cF-e9r"; */
"0zY-cF-e9r.ibShadowedToolTip" = "Type: plist boolean\nFailsafe: false\nDescription: Reset BGRT table Displayed status field to false.\nThis works around firmware that provide a BGRT table but fail to handle screen updates afterwards.";

/* Class = "NSTableView"; ibShadowedToolTip = "1. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n2. Count\nType: plist integer\nFailsafe: 0 (Apply patch to all occurrences found)\nDescription: Number of occurrences to patch.\n3. Enabled\nType: plist boolean\nDefauFailsafe: false\nDescription: Set to true to apply this ACPI patch.\n4. Find\nType: plist data\nFailsafe: Empty\nDescription: Data to find. Must be equal to Replace in size if set.\n5. Limit\nType: plist integer\nFailsafe: 0 (Search entire ACPI table)\nDescription: Maximum number of bytes to search for.\n6. Mask\nType: plist data\nDefauFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during find comparison. Allows fuzzy search by ignoring not masked (set to zero) bits. Must be equal to Replace in size if set.\n7. OemTableId\nType: plist data, 8 bytes\nFailsafe: All zero (Match any table OEM ID)\nDescription: Match table OEM ID equal to this value.\n8. Replace\nType: plist data\nFailsafe: Empty\nDescription: Replacement data of one or more bytes.\n9. ReplaceMask\nType: plist data\nFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during replacement. Allows fuzzy replacement by updating masked (set to non-zero) bits. Must be equal to Replace in size if set.\n10. Skip\nType: plist integer\nFailsafe: 0 (Do not skip any occurrences)\nDescription: Number of found occurrences to skip before replacements are applied.\n11. TableLength\nType: plist integer\nFailsafe: 0 (Match any table size)\nDescription: Match table size equal to this value.\n12. TableSignature\nType: plist data, 4 bytes (Match any table signature)\nFailsafe: All zero\nDescription: Match table signature equal to this value."; ObjectID = "2tM-Ig-MFJ"; */
"2tM-Ig-MFJ.ibShadowedToolTip" = "1. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n2. Count\nType: plist integer\nFailsafe: 0 (Apply patch to all occurrences found)\nDescription: Number of occurrences to patch.\n3. Enabled\nType: plist boolean\nDefauFailsafe: false\nDescription: Set to true to apply this ACPI patch.\n4. Find\nType: plist data\nFailsafe: Empty\nDescription: Data to find. Must be equal to Replace in size if set.\n5. Limit\nType: plist integer\nFailsafe: 0 (Search entire ACPI table)\nDescription: Maximum number of bytes to search for.\n6. Mask\nType: plist data\nDefauFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during find comparison. Allows fuzzy search by ignoring not masked (set to zero) bits. Must be equal to Replace in size if set.\n7. OemTableId\nType: plist data, 8 bytes\nFailsafe: All zero (Match any table OEM ID)\nDescription: Match table OEM ID equal to this value.\n8. Replace\nType: plist data\nFailsafe: Empty\nDescription: Replacement data of one or more bytes.\n9. ReplaceMask\nType: plist data\nFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during replacement. Allows fuzzy replacement by updating masked (set to non-zero) bits. Must be equal to Replace in size if set.\n10. Skip\nType: plist integer\nFailsafe: 0 (Do not skip any occurrences)\nDescription: Number of found occurrences to skip before replacements are applied.\n11. TableLength\nType: plist integer\nFailsafe: 0 (Match any table size)\nDescription: Match table size equal to this value.\n12. TableSignature\nType: plist data, 4 bytes (Match any table signature)\nFailsafe: All zero\nDescription: Match table signature equal to this value.";

/* Class = "NSTableColumn"; headerCell.title = "Mask"; ObjectID = "4j9-uJ-Gbu"; */
"4j9-uJ-Gbu.headerCell.title" = "Mask";

/* Class = "NSButtonCell"; title = "NormalizeHeaders"; ObjectID = "6NS-cZ-NZu"; */
"6NS-cZ-NZu.title" = "NormalizeHeaders";

/* Class = "NSTextFieldCell"; title = "Loading Resources"; ObjectID = "7g0-XW-xjy"; */
"7g0-XW-xjy.title" = "Loading Resources";

/* Class = "NSTableView"; ibShadowedToolTip = "1. All\nType: plist boolean\nFailsafe: false (Only delete the first matched table)\nDescription: Set to true to delete all ACPI tables matching the condition.\n2. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n3. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true to remove this ACPI table.\n4. OemTableId\nType: plist data, 8 bytes\nFailsafe: All zero (Match any table OEM ID)\nDescription: Match table OEM ID equal to this value.\n5. TableLength\nType: plist integer\nFailsafe: 0 (Match any table size)\nDescription: Match table size to be equal to this value unless 0.\n6. TableSignature\nType: plist data, 4 bytes\nFailsafe: All zero (Match any table signature)\nDescription: Match table signature equal to this value.\n\nNote: Do not use table signatures when the sequence must be replaced in multiple places. This is particularly relevant when performing different types of renames."; ObjectID = "8sm-zn-vNl"; */
"8sm-zn-vNl.ibShadowedToolTip" = "1. All\nType: plist boolean\nFailsafe: false (Only delete the first matched table)\nDescription: Set to true to delete all ACPI tables matching the condition.\n2. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n3. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true to remove this ACPI table.\n4. OemTableId\nType: plist data, 8 bytes\nFailsafe: All zero (Match any table OEM ID)\nDescription: Match table OEM ID equal to this value.\n5. TableLength\nType: plist integer\nFailsafe: 0 (Match any table size)\nDescription: Match table size to be equal to this value unless 0.\n6. TableSignature\nType: plist data, 4 bytes\nFailsafe: All zero (Match any table signature)\nDescription: Match table signature equal to this value.\n\nNote: Do not use table signatures when the sequence must be replaced in multiple places. This is particularly relevant when performing different types of renames.";

/* Class = "NSTableView"; ibShadowedToolTip = "1. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n\n2. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true to add this ACPI table.\n\n3. Path\nType: plist string\nFailsafe: Empty\nDescription: File paths meant to be loaded as ACPI tables. Example values include DSDT.aml, SubDir/SSDT-8.aml, SSDT-USBX.aml, etc.\n\nACPI table load order follows the item order in the array. All ACPI tables load from OC/ACPI/Custom directory.\n\nNote: All tables apart from tables with a DSDT table identifier (determined by parsing data not by filename) insert new tables into the ACPI stack. DSDT tables perform a replacement of DSDT table instead."; ObjectID = "9ZU-zR-Tmy"; */
"9ZU-zR-Tmy.ibShadowedToolTip" = "1. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n\n2. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true to add this ACPI table.\n\n3. Path\nType: plist string\nFailsafe: Empty\nDescription: File paths meant to be loaded as ACPI tables. Example values include DSDT.aml, SubDir/SSDT-8.aml, SSDT-USBX.aml, etc.\n\nACPI table load order follows the item order in the array. All ACPI tables load from OC/ACPI/Custom directory.\n\nNote: All tables apart from tables with a DSDT table identifier (determined by parsing data not by filename) insert new tables into the ACPI stack. DSDT tables perform a replacement of DSDT table instead.";

/* Class = "NSTableColumn"; headerCell.title = "Skip"; ObjectID = "A4Q-If-0AG"; */
"A4Q-If-0AG.headerCell.title" = "Skip";

/* Class = "NSTableColumn"; headerCell.title = "TableLength"; ObjectID = "CVl-gt-v4L"; */
"CVl-gt-v4L.headerCell.title" = "TableLength";

/* Class = "NSTableColumn"; headerCell.title = "Path*"; ObjectID = "CbM-86-go4"; */
"CbM-86-go4.headerCell.title" = "Path*";

/* Class = "NSBox"; title = "Quirks"; ObjectID = "DxA-Lh-I4Q"; */
"DxA-Lh-I4Q.title" = "Quirks";

/* Class = "NSTableColumn"; headerCell.title = "Enabled"; ObjectID = "FLp-3q-DSv"; */
"FLp-3q-DSv.headerCell.title" = "Enabled";

/* Class = "NSButtonCell"; title = "EnableForAll"; ObjectID = "HdU-pu-zKX"; */
"HdU-pu-zKX.title" = "EnableForAll";

/* Class = "NSTableColumn"; headerCell.title = "ReplaceMask"; ObjectID = "JFF-S2-t99"; */
"JFF-S2-t99.headerCell.title" = "ReplaceMask";

/* Class = "NSTableColumn"; headerCell.title = "Comment"; ObjectID = "JjS-7V-0PV"; */
"JjS-7V-0PV.headerCell.title" = "Comment";

/* Class = "NSTableColumn"; headerCell.title = "Find"; ObjectID = "K4n-vm-jxn"; */
"K4n-vm-jxn.headerCell.title" = "Find";

/* Class = "NSMenuItem"; title = "List Of Patches"; ObjectID = "Kbb-Cq-tfz"; */
"Kbb-Cq-tfz.title" = "List Of Patches";

/* Class = "NSTableColumn"; headerCell.title = "TableLength"; ObjectID = "MtH-av-7W0"; */
"MtH-av-7W0.headerCell.title" = "TableLength";

/* Class = "NSButtonCell"; title = "Scan/Browse"; ObjectID = "Ndv-7C-25y"; */
"Ndv-7C-25y.title" = "Scan/Browse";

/* Class = "NSTableColumn"; headerCell.title = "Replace"; ObjectID = "NtB-gi-4nw"; */
"NtB-gi-4nw.headerCell.title" = "Replace";

/* Class = "NSTableColumn"; headerCell.title = "OemTableId"; ObjectID = "Nxc-pO-D4k"; */
"Nxc-pO-D4k.headerCell.title" = "OemTableId";

/* Class = "NSButtonCell"; title = "RebaseRegions"; ObjectID = "OG6-fc-Q9m"; */
"OG6-fc-Q9m.title" = "RebaseRegions";

/* Class = "NSButtonCell"; title = "ResetHwSig"; ObjectID = "Z6k-wb-4yC"; */
"Z6k-wb-4yC.title" = "ResetHwSig";

/* Class = "NSTableColumn"; headerCell.title = "Enabled"; ObjectID = "c8a-dM-DNw"; */
"c8a-dM-DNw.headerCell.title" = "Enabled";

/* Class = "NSTableColumn"; headerCell.title = "Comment"; ObjectID = "cAx-1U-xJ9"; */
"cAx-1U-xJ9.headerCell.title" = "Comment";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Cleanup ACPI header fields to workaround macOS ACPI implementation flaws that result in boot crashes. Reference: Debugging AppleACPIPlatform on 10.13 by Alex James (also known as theracermaster). The issue was fixed in macOS Mojave (10.14)."; ObjectID = "eza-Xg-dPF"; */
"eza-Xg-dPF.ibShadowedToolTip" = "Type: plist boolean\nFailsafe: false\nDescription: Cleanup ACPI header fields to workaround macOS ACPI implementation flaws that result in boot crashes. Reference: Debugging AppleACPIPlatform on 10.13 by Alex James (also known as theracermaster). The issue was fixed in macOS Mojave (10.14).";

/* Class = "NSButtonCell"; title = "ResetLogoStatus"; ObjectID = "fCv-Py-taQ"; */
"fCv-Py-taQ.title" = "ResetLogoStatus";

/* Class = "NSTableColumn"; headerCell.title = "Comment"; ObjectID = "gIS-d5-pG5"; */
"gIS-d5-pG5.headerCell.title" = "Comment";

/* Class = "NSTableColumn"; headerCell.title = "Limit"; ObjectID = "ger-9o-NnS"; */
"ger-9o-NnS.headerCell.title" = "Limit";

/* Class = "NSTableColumn"; headerCell.title = "Count"; ObjectID = "hIr-Vr-rVp"; */
"hIr-Vr-rVp.headerCell.title" = "Count";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Attempt to heuristically relocate ACPI memory regions. Not recommended.\n\nACPI tables are often generated dynamically by the underlying firmware implementation. Among the position- independent code, ACPI tables may contain the physical addresses of MMIO areas used for device configuration, typically grouped by region (e.g. OperationRegion). Changing firmware settings or hardware configuration, upgrading or patching the firmware inevitably leads to changes in dynamically generated ACPI code, which sometimes results in the shift of the addresses in the aforementioned OperationRegion constructions.\n\nFor this reason, the application of modifications to ACPI tables is extremely risky. The best approach is to make as few changes as possible to ACPI tables and to avoid replacing any tables, particularly DSDT tables. When this cannot be avoided, ensure that any custom DSDT tables are based on the most recent DSDT tables or attempt to remove reads and writes for the affected areas.\n\nWhen nothing else helps, this option could be tried to avoid stalls at PCI Configuration Begin phase of macOS booting by attempting to fix the ACPI addresses. It is not a magic bullet however, and only works with the most typical cases. Do not use unless absolutely required as it can have the opposite effect on certain platforms and result in boot failures."; ObjectID = "iWF-dk-0VK"; */
"iWF-dk-0VK.ibShadowedToolTip" = "Type: plist boolean\nFailsafe: false\nDescription: Attempt to heuristically relocate ACPI memory regions. Not recommended.\n\nACPI tables are often generated dynamically by the underlying firmware implementation. Among the position- independent code, ACPI tables may contain the physical addresses of MMIO areas used for device configuration, typically grouped by region (e.g. OperationRegion). Changing firmware settings or hardware configuration, upgrading or patching the firmware inevitably leads to changes in dynamically generated ACPI code, which sometimes results in the shift of the addresses in the aforementioned OperationRegion constructions.\n\nFor this reason, the application of modifications to ACPI tables is extremely risky. The best approach is to make as few changes as possible to ACPI tables and to avoid replacing any tables, particularly DSDT tables. When this cannot be avoided, ensure that any custom DSDT tables are based on the most recent DSDT tables or attempt to remove reads and writes for the affected areas.\n\nWhen nothing else helps, this option could be tried to avoid stalls at PCI Configuration Begin phase of macOS booting by attempting to fix the ACPI addresses. It is not a magic bullet however, and only works with the most typical cases. Do not use unless absolutely required as it can have the opposite effect on certain platforms and result in boot failures.";

/* Class = "NSTableColumn"; headerCell.title = "All"; ObjectID = "iwn-0u-n3y"; */
"iwn-0u-n3y.headerCell.title" = "All";

/* Class = "NSTabViewItem"; label = "Patch"; ObjectID = "jB3-Fa-Mq9"; */
"jB3-Fa-Mq9.label" = "Patch";

/* Class = "NSButtonCell"; title = "Download/Update Acpi"; ObjectID = "l2s-yf-wZB"; */
"l2s-yf-wZB.title" = "Download/Update Acpi";

/* Class = "NSButtonCell"; title = "FadtEnableReset"; ObjectID = "l7b-Bk-2B3"; */
"l7b-Bk-2B3.title" = "FadtEnableReset";

/* Class = "NSTableColumn"; headerCell.title = "TableSignature*"; ObjectID = "mHJ-L1-J8M"; */
"mHJ-L1-J8M.headerCell.title" = "TableSignature*";

/* Class = "NSTableColumn"; headerCell.title = "OemTableId"; ObjectID = "qk5-w1-h2Q"; */
"qk5-w1-h2Q.headerCell.title" = "OemTableId";

/* Class = "NSTabViewItem"; label = "Delete"; ObjectID = "swX-ck-WbC"; */
"swX-ck-WbC.label" = "Delete";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Reset FACS table HardwareSignature value to 0.\nThis works around firmware that fail to maintain hardware signature across the reboots and cause issues with waking from hibernation."; ObjectID = "u3f-B9-p1e"; */
"u3f-B9-p1e.ibShadowedToolTip" = "Type: plist boolean\nFailsafe: false\nDescription: Reset FACS table HardwareSignature value to 0.\nThis works around firmware that fail to maintain hardware signature across the reboots and cause issues with waking from hibernation.";

/* Class = "NSTableColumn"; headerCell.title = "TableSignature*"; ObjectID = "wld-sU-lGp"; */
"wld-sU-lGp.headerCell.title" = "TableSignature*";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Provide reset register and flag in FADT table to enable reboot and shutdown.\n\nMainly required on legacy hardware and a few newer laptops. Can also fix power-button shortcuts. Not recommended unless required."; ObjectID = "xYB-OX-ce7"; */
"xYB-OX-ce7.ibShadowedToolTip" = "Type: plist boolean\nFailsafe: false\nDescription: Provide reset register and flag in FADT table to enable reboot and shutdown.\n\nMainly required on legacy hardware and a few newer laptops. Can also fix power-button shortcuts. Not recommended unless required.";

/* Class = "NSTabViewItem"; label = "Add"; ObjectID = "y3O-8J-sex"; */
"y3O-8J-sex.label" = "Add";

/* Class = "NSTableColumn"; headerCell.title = "Enabled"; ObjectID = "z8k-hB-WoQ"; */
"z8k-hB-WoQ.headerCell.title" = "Enabled";
